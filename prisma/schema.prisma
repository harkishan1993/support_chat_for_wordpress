generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model user {
  id            String             @id @default(cuid())
  username      String?
  fullName      String?
  password      String?
  gender        Gender?
  profilePic    String?
  assistanceId  String?
  createdAt     DateTime           @default(now())
  updatedAt     DateTime           @updatedAt
  role          Role               @default(user)
  // Relations
  conversations userconversation[]
  messages      message[]
  botmessages   botmessages[]
  messagestatus messagestatus[]
  notification  notification[]
}

enum Role {
  user
  administrator
  support_manager
}

model notification {
  id        String   @id @default(cuid())
  userId    String
  type      String
  body      String
  seen      Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user user @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model botmessages {
  id       String  @id @default(cuid())
  User     user?   @relation(fields: [userId], references: [id])
  userId   String?
  messages Json    @db.Json
}

model conversation {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  participants userconversation[]
  messages     message[]
}

model message {
  id             String   @id @default(cuid())
  conversationId String
  senderId       String
  body           String?
  type           Type     @default(text)
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  files          Json? 
  conversation  conversation    @relation(fields: [conversationId], references: [id], onDelete: Cascade)
  sender        user            @relation(fields: [senderId], references: [id], onDelete: Cascade)
  messageStatus messagestatus[]
}

model messagestatus {
  id        String    @id @default(cuid())
  message   message   @relation(fields: [messageId], references: [id], onDelete: Cascade)
  messageId String
  user      user      @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String
  seen      Boolean   @default(false)
  seenAt    DateTime?
}

enum Type {
  text
  emoji
  reply
  welcome
  file
}

// Many-to-Many relation table for Users and Conversations
model userconversation {
  userId         String
  conversationId String

  // Relations
  user         user         @relation(fields: [userId], references: [id], onDelete: Cascade)
  conversation conversation @relation(fields: [conversationId], references: [id], onDelete: Cascade)

  @@id([userId, conversationId]) // Composite primary key
}

enum Gender {
  male
  female
}
